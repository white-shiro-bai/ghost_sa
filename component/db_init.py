# -*- coding: utf-8 -*-
#
#Date: 2024-12-29 16:38:21
#Author: unknowwhite@outlook.com
#WeChat: Ben_Xiaobai
#LastEditTime: 2025-01-12 18:07:42
#FilePath: \ghost_sa_github_cgq\component\db_init.py
#
import sys
sys.path.append('./')
import os
from configs.export import write_to_log
from component.db_op import do_tidb_exe,do_tidb_select
from component.public_value import get_time_array_from_nlp,current_timestamp10
from component.db_func import select_all_project

class DbInit():
    #该工具模仿zabbix的数据库版本控制概念，实现在CICD过程中保持数据表最新。
    #版本号定义：版本号由6位数字组成，前两位为大版本，从11开始，中两位为小版本，从01开始，后两位为补丁版本，从01开始。最小的版本号为110101。
    def __init__(self):
        self.current_version = -1
        self.all_packages = {}
        self.load_packages()
        self.setup_version = '110407'
        self.db_version  = self.check_db_version()
        self.pid = os.getpid()

    def check_db_version(self):
        #确定数据库版本，适配不同的建表/升级语句，返回版本包括'mysql','tidb6.4-','tidb6.5+'
        sql = 'select version();'
        result = do_tidb_select(sql)
        version = result[0][0][0].lower()
        if version.find('tidb') == -1:
            return 'mysql'
        tidb_version = version.split('tidb-v')[1]
        major, minor, *_ = map(int, tidb_version.split('.'))
        if major > 6 or (major == 6 and minor >= 5):
            #这里不会误判6.3，版本号是6的时候，只会落到后面的条件里，前面的条件不会命中。
            return 'tidb6.5+'
        else:
            return 'tidb6.4-'
    
    def get_token(self):
        #如果数据库里PID是空的，用当前PID占用。
        pass
    def release_token(self):
        #释放当前PID的占用。
        pass

    def check_version(self):
        #检查版本，未安装返回-2，未初始化返回-1，已初始化返回当前版本号。
        sql = "show tables like 'project_list';" #检查是否安装了ghost_sa
        result = do_tidb_select(sql,retrycount=0)
        if result[1] == 0:
            return -2
        sql = "show tables like 'dbversion';"
        result = do_tidb_select(sql,retrycount=0)
        if result[1] == 0:
            self.init_version(currentversion=-1)
            return -1
        sql = "select currentversion from dbversion;" #这里不考虑额外处理读取到-1版本的情况，因为版本检查时traffic触发的，traffix会在上一步得到-1或这一步读到-1时，开始版本检查器。
        result = do_tidb_select(sql,retrycount=0)
        return result[0][0][0]

    def init_version(self,currentversion=-1):
        sql_initversion = """create table if not exists dbversion (`id` int NOT NULL DEFAULT '1',  `currentversion` int NOT NULL DEFAULT '-1' COMMENT '当前版本号,-1为未初始化,-2为未安装ghost_sa',  `nextversion` int NOT NULL DEFAULT '-1' COMMENT '即将执行的升级会升级到的版本号',  `dbversion` varchar(255) NOT NULL DEFAULT 'mysql' COMMENT '程序自动检测的数据库版本',  `pid` int NOT NULL DEFAULT '-1' COMMENT '进程ID，非0时表示被进程锁定，不允许进行升级操作。',  UNIQUE KEY `dbversion_unique` (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='数据表版本表';"""
        do_tidb_exe(sql_initversion,retrycount=0)
        sql_initversiondata = """insert into dbversion (currentversion,nextversion,dbversion,pid) values ({currentversion},{currentversion},'{dbversion}',-1);""".format(dbversion=self.db_version,currentversion=currentversion)
        do_tidb_exe(sql_initversiondata,retrycount=0)

    def update_version(self,package):
        #根据获取到的升级包，更新下一版本号，执行升级后，更新当前版本号。
        self.update_dbversion(nextversion=package['version'])
        self.update_exec(package)
        #执行单一升级脚本
        self.update_dbversion(currentversion=package['version'])
        pass

    def update_dbversion(self,currentversion=0,nextversion=0):
        #更新数据库版本号
        sql = "update dbversion set id = 1"
        if currentversion:
            sql += ",currentversion = %(currentversion)d"
        if nextversion:
            sql += ",nextversion = %(nextversion)d"
        sql += ";"
        res = do_tidb_exe(sql=sql,retrycount=0,args={'currentversion':currentversion,'nextversion':nextversion})
        if res[1] == 0:
            return 'success'
        else:
            return 'fail'


    def update_exec(self,package):
        #执行升级脚本并检查结果。
        log_start = '开始执行升级脚本：', str(package['version']), '，升级类型：', package['updatetype'], '，升级描述：', package['task_desc']
        if package['updatetype'] == 'once':
            pass
        elif package['updatetype'] == 'project':
            project_list,project_count = select_all_project()
            for project in project_list:
                pass
        log_check = log_start + '，脚本校验：' + '包含' if package['check_sql'] else '不包含'
        if package['check_sql']:
            check = self.check_update(package['check_sql'])
        log_end = log_check + '，脚本执行：' + '成功' if check=='success' else '失败'

    def check_update(self,sql,check_index,check_sql_result):
        #检查升级脚本是否执行成功
        res = do_tidb_select(sql,retrycount=0)
        if res[0] == 'sql_err':
            return 'wrong_sql'
        if res[1] == 0:
            return 'no_result'
        if res[0][0][check_index] == check_sql_result:
            return 'success'


    def find_next_package(self):
        #确定下一个升级脚本。
        #如果当前版本版本号低于下一版本号，说明上一次升级没执行成功并导致了程序终止。这时应该从当前版本号开始寻找下一脚本，而不是从下一版本号开始，因为可能存在下一版号本身脚本有问题，导致升级失败，这时如果新版本的程序复用原来的版本号，会造成如果用户没下载最新版，出现错误时直接上报故障，无法判断是哪个版本造成的故障，不利于复盘事故。而使用新的版本号，就没有这个问题了。
        #为了适配多个数据库，这里需要根据数据库类型进行版本号跳过，如同一个步骤分为 a类型和all类型（非a类型），版本号设计时需要a条件的版本号小于all条件的版本号。并在目标版本号上检测需要升级的源。
        #如 1->2->5 1->3->5 1->4->5，2的条件最苛刻，4的条件最宽松。会依次命中 2，3，4。但是234里都指定，需要当前版本是1时，才能执行本次升级。5里指定，当前版本是234时，才能执行升级。即可兼容多个不同的数据库。
        pass

    def first_version_inspect(self):
        #针对老版本，检查目前数据库结构，确定当前版本号。
        self.load_packages()
        #根据package['version']从小到大重新排序
        inspect_version = dict(sorted(self.all_packages.items(), key=lambda item: item[1]['version']))
        for version in inspect_version:
            if inspect_version[version]['updatetype'] == 'once':
                check = self.check_update(sql=inspect_version[version]['check_sql'],check_index=inspect_version[version]['check_index'],check_sql_result=inspect_version[version]['check_sql_result'])
                if check == 'success':
                    self.current_version = inspect_version[version]['version']
                    self.update_dbversion(currentversion=self.current_version,nextversion=self.current_version)
            if inspect_version[version]['updatetype'] == 'project':
                project_list,project_count = select_all_project()
                for project in project_list:

        pass
        

    def traffic_update(self,max_retry_count=3):
        #控制整个升级进程，如果没库，先创建库，如果有库没版本信息，先创建版本信息表，然后根据检查结果，确定当前表的版本，再根据版本信息表里的版本号，开始升级。
        fail_count = 0
        while self.current_version != self.setup_version:
            self.current_version = self.check_version()
            if self.current_version == -2:
                self.setup_ghost_sa(project_name='default')
                self.init_version(currentversion=self.setup_version)
            elif self.current_version == -1:
                self.first_version_inspect()
            # elif self.current_version < self.setup_version:
            #     next_version = self.find_next_package()
            #     if next_version:
            #         result = self.update_version()
            #         if result['status'] == 'fail':
            #             fail_count += 1
            #             log(result['reason'])
            #             if fail_count >= max_retry_count:
            #                 raise Exception('update fail')
            #                 break

    def load_packages(self):
        #装载版本信息
        # updatetype包含如下类型：once，project。once执行一次，project根据project目录里的项目循环。
        # dbtype用来区分数据库类型，适配不同数据库的sql语句。'mysql',仅在非tidb环境执行，'tidb6.4-'仅在tidb6.5以下版本执行，'tidb6.5+'仅在tidb6.5以上环境执行，'tidb'在所有tidb环境下执行，'all'在所有环境都执行。
        # additional_func是动态执行函数。适用于无法单纯使用sql解决的复杂函数。
        # 
        self.all_packages['110102'] = {'version':110102,'previous_version':[-1],'updatetype':'once','dbtype':'all','sql':['''ALTER TABLE `project_list` ADD COLUMN `enable_scheduler` int(4) NULL DEFAULT 1 COMMENT '是否启动定时器支持' AFTER `user_count`;'''],'task_desc':'项目列表增加定时器开关','check_sql':'''SHOW COLUMNS FROM project_list LIKE 'enable_scheduler';''','check_index':0,'check_sql_result':'enable_scheduler','args':[],'eval':[]}
        self.all_packages['110103'] = {'version':110103,'previous_version':[110102],'updatetype':'once','dbtype':'all','sql':['''CREATE TABLE IF NOT EXISTS `status_code` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',    `desc` varchar(255) DEFAULT NULL COMMENT '含义',    `p_id` int(11) DEFAULT NULL COMMENT '父id',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1;'''],'task_desc':'创建状态码表','check_sql':'''SHOW TABLES LIKE 'status_code';''','check_index':0,'check_sql_result':'status_code','args':[],'eval':[]}
        self.all_packages['110104'] = {'version':110104,'previous_version':[110103],'updatetype':'once','dbtype':'all','sql':["INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (1, '分群列表状态', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (2, '创建列表开始', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (3, '分群信息写入中', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (4, '分群写入完成并包含错误', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (5, '分群写入完成', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (6, '分群写入失败', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (7, '生效策略', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (8, '自动', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (9, '手动', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (10, '禁用', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (11, '进入分群队列', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (12, '优先级', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (13, '普通', 12);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (14, '高', 12);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (15, '最高', 12);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (16, '已添加任务队列', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (17, '任务已被选取', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (18, '任务方法加载完', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (19, '任务执行成功', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (20, '分群ETL失败', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (21, '任务执行失败', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (22, '通知方式', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (23, 'email', 22);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (24, '自动分群但不自动应用模板', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (25, '推送状态', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (26, '推送成功', 25);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (27, '推送失败', 25);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (28, '自动分群自动应用模板但不自动发送', 7);"],'task_desc':'添加状态码表信息','check_sql':'SELECT MAX(id) FROM events.status_code;','check_index':0,'check_sql_result':'28','args':[],'eval':[]}
        self.all_packages['110105'] = {'version':110105,'previous_version':[110104],'updatetype':'once','dbtype':'all','sql':["""CREATE TABLE IF NOT EXISTS `scheduler_jobs` (    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '任务id',    `project` varchar(255) DEFAULT NULL COMMENT '项目id',    `group_id` int(11) DEFAULT NULL COMMENT 'group_plan的id',    `list_index` int(11) DEFAULT NULL COMMENT 'group_index任务完成后，补充',    `datetime` int(11) DEFAULT NULL COMMENT '执行的日期，即要执行的那个任务的时间（不是任务执行时间，是要执行的时间。如周三时执行周一的任务。也用来防止任务重复添加）',    `data` json DEFAULT NULL COMMENT '其他附带的参数',    `priority` int(4) DEFAULT NULL COMMENT '优先级',    `status` int(4) DEFAULT NULL COMMENT '状态',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`),    UNIQUE KEY `ind_task` (`project`,`group_id`,`datetime`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1;"""],'task_desc':'添加计划任务表','check_sql':"SHOW TABLES LIKE 'scheduler_jobs';",'check_index':0,'check_sql_result':'scheduler_jobs','args':[],'eval':[]}
        self.all_packages['110106'] = {'version':110106,'previous_version':[110105],'updatetype':'project','dbtype':'all','sql':"""CREATE TABLE IF NOT EXISTS `{project_name}_usergroup_data` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `group_list_id` int(11) DEFAULT NULL COMMENT '分群列表id',    `data_index` int(11) DEFAULT NULL COMMENT '最新一组数据的index_id',    `data_key` varchar(255) DEFAULT NULL COMMENT '数据的唯一识别id',    `data_json` json DEFAULT NULL COMMENT '数据包',    `enable` int(11) DEFAULT NULL COMMENT '生效策略。参考status_code，p_id=7',    `created_at` int(11) DEFAULT NULL,    `updated_at` int(11) DEFAULT NULL,    PRIMARY KEY (`id`),    KEY `group_list_id` (`group_list_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1;""",'task_desc':'创建分群数据表','check_sql':'SHOW TABLES LIKE "{project_name}_usergroup_data";','check_index':0,'check_sql_result':"{project_name}_usergroup_data",'args':['project_name'],'eval':[]}
        self.all_packages['110107'] = {'version':110107,'previous_version':[110106],'updatetype':'project','dbtype':'all','sql':"""CREATE TABLE IF NOT EXISTS `{project_name}_usergroup_list` (    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分群列表id',    `group_id` int(11) DEFAULT NULL COMMENT '分群id',    `group_list_index` int(11) DEFAULT NULL COMMENT '分群列表顺位',    `list_init_date` int(11) DEFAULT NULL COMMENT '触发时间',    `list_desc` varchar(255) DEFAULT NULL COMMENT '清单所描述的',    `jobs_id` int(4) DEFAULT NULL COMMENT 'scheduler_jbos的id',    `item_count` int(11) DEFAULT NULL COMMENT '分组条目数',    `status` int(4) DEFAULT NULL COMMENT '分群状态。参考status_code,p_id=1',    `complete_at` int(11) DEFAULT NULL COMMENT '分群完成时间',    `apply_temple_times` int(2) DEFAULT 0 COMMENT '被套用模板的次数',    `created_at` int(11) DEFAULT NULL COMMENT '条目创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '条目更新时间',    PRIMARY KEY (`id`),    UNIQUE KEY `unique_key` (`group_id`,`group_list_index`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1;""",'task_desc':'创建分群列表','check_sql':'SHOW TABLES LIKE "{project_name}_usergroup_list";','check_index':0,'check_sql_result':"{project_name}_usergroup_list",'args':['project_name'],'eval':[]}
        self.all_packages['110108'] = {'version':110108,'previous_version':[110107],'updatetype':'project','dbtype':'all','sql':"""CREATE TABLE IF NOT EXISTS `{project_name}_usergroup_plan` (    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分群id',    `group_title` varchar(255) DEFAULT NULL COMMENT '分群标题',    `group_desc` varchar(255) DEFAULT NULL COMMENT '分群描述',    `func` json DEFAULT NULL COMMENT '分群执行方法参考/scheduler_jobs/scheduler_job_creator.py',    `latest_data_list_index` int(11) DEFAULT NULL COMMENT '最新一组数据的id',    `repeatable` varchar(20) DEFAULT NULL COMMENT '定时器，分，时，日，月，周。不填的用*代替。跟crontab一个逻辑，不支持1-10的方式表达，多日的需要1,2,3,4,5,6,7,8这样的形式填',    `priority` int(4) DEFAULT NULL COMMENT '任务执行优先级',    `latest_data_time` int(11) DEFAULT NULL COMMENT '最新一组数据的完成时间',    `repeat_times` int(11) DEFAULT 0 COMMENT '分群完成次数',    `enable_policy` int(11) DEFAULT NULL COMMENT '生效策略。参考status_code，p_id=7',    `latest_apply_temple_id` int(11) DEFAULT NULL COMMENT '最后一次执行的模板类型',    `latest_apply_temple_time` int(11) DEFAULT NULL COMMENT '最后一次执行的模型时间',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1;""",'task_desc':'创建分群计划表','check_sql':'SHOW TABLES LIKE "{project_name}_usergroup_plan";','check_index':0,'check_sql_result':"{project_name}_usergroup_plan",'args':['project_name'],'eval':[]}
        self.all_packages['110109'] = {'version':110109,'previous_version':[110108],'updatetype':'project','dbtype':'all','sql':"""CREATE TABLE IF NOT EXISTS `{project_name}_noti` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `plan_id` int(11) DEFAULT NULL COMMENT '计划id',    `list_id` int(11) DEFAULT NULL COMMENT '列表id',    `data_id` int(11) DEFAULT NULL COMMENT '数据id',    `temple_id` int(4) DEFAULT NULL COMMENT '模板id',    `noti_group_id` int(11) DEFAULT NULL COMMENT '消息群组id',    `distinct_id` varchar(512) DEFAULT NULL COMMENT '用户识别id',    `priority` int(4) DEFAULT NULL COMMENT '优先级',    `status` int(4) DEFAULT NULL COMMENT '状态',    `owner` varchar(255) DEFAULT NULL COMMENT '添加人',    `type` int(4) DEFAULT NULL COMMENT '消息类型',    `content` json DEFAULT NULL COMMENT '消息内容',    `send_at` int(11) DEFAULT NULL COMMENT '计划发送时间',    `recall_result` text DEFAULT NULL COMMENT '发送结果',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`),    KEY `distinct_id` (`distinct_id`),    KEY `send_plan` (`status`,`priority`,`send_at`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1001;""",'task_desc':'创建推送消息详情表','check_sql':'SHOW TABLES LIKE "{project_name}_noti";','check_index':0,'check_sql_result':"{project_name}_noti",'args':['project_name'],'eval':[]}
        self.all_packages['110110'] = {'version':110110,'previous_version':[110109],'updatetype':'project','dbtype':'all','sql':"""CREATE TABLE IF NOT EXISTS `{project_name}_noti_group` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `plan_id` int(11) DEFAULT NULL COMMENT '分群计划id',    `list_id` int(11) DEFAULT NULL COMMENT '分群列表id',    `data_id` int(11) DEFAULT NULL COMMENT '分群数据id',    `temple_id` int(11) DEFAULT NULL COMMENT '应用模板id',    `priority` int(4) DEFAULT NULL COMMENT '优先级id',    `status` int(4) DEFAULT NULL COMMENT '状态id',    `owner` varchar(255) DEFAULT NULL COMMENT '添加人',    `send_at` int(11) DEFAULT NULL COMMENT '计划发送时间',    `sent` int(11) DEFAULT NULL COMMENT '已发送数目',    `total` int(11) DEFAULT NULL COMMENT '该计划总数目',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1001;""",'task_desc':'创建推送消息群组表','check_sql':'SHOW TABLES LIKE "{project_name}_noti_group";','check_index':0,'check_sql_result':"{project_name}_noti_group",'args':['project_name'],'eval':[]}
        self.all_packages['110111'] = {'version':110111,'previous_version':[110110],'updatetype':'project','dbtype':'all','sql':"""CREATE TABLE IF NOT EXISTS `{project_name}_noti_temple` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `name` varchar(255) DEFAULT NULL COMMENT '模板名称',    `temple_desc` varchar(255) DEFAULT NULL COMMENT '模板描述',    `args` json DEFAULT NULL COMMENT '模板参数',    `content` json DEFAULT NULL COMMENT '模板内容',    `apply_times` int(11) DEFAULT 0 COMMENT '应用次数',    `lastest_apply_time` int(11) DEFAULT NULL COMMENT '最后一次应用时间',    `lastest_apply_list` int(11) DEFAULT NULL COMMENT '最后一次应用列表',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1001;""",'task_desc':'创建推送消息模板表','check_sql':'SHOW TABLES LIKE "{project_name}_noti_temple";','check_index':0,'check_sql_result':"{project_name}_noti_temple",'args':['project_name'],'eval':[]}
        self.all_packages['110201'] = {'version':110201,'previous_version':[110111],'updatetype':'once','dbtype':'all','sql':["INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (29,'微信公众号',22);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (30,'黑名单修改原因',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (31,'用户自助退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (32,'用户自助取消退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (33,'客服投诉退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (34,'客服取消退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (35,'接收地址错误',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (36,'接收地址判定为垃圾邮件',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (37,'导入第三方黑名单',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (38,'第三方白名单覆盖',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (39,'黑名单状态',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (40,'全部禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (41,'推广类禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (42,'通知类禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (43,'拟加入黑名单待确认（如等待运营确认）',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (44,'已解禁',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (45,'不允许解禁',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (46,'误判人工解除',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (47,'客服主观退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (48,'消息级别',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (49,'紧急广播（忽略一切退订限制）',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (50,'IM',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (51,'通知',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (52,'运营',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (53,'推广',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (54,'运营类禁用',39);"],'task_desc':'添加状态码表信息','check_sql':'SELECT MAX(id) FROM events.status_code;','check_index':0,'check_sql_result':'54','args':[],'eval':[]}
        self.all_packages['110202'] = {'version':110202,'previous_version':[110201],'updatetype':'once','dbtype':'all','sql':["""CREATE TABLE `recall_blacklist` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `project` varchar(255) NOT NULL COMMENT '项目名',  `distinct_id` varchar(255) DEFAULT NULL,  `key` varchar(255) NOT NULL COMMENT '渠道key',  `type_id` int(11) NOT NULL COMMENT '渠道类型',  `reason_id` int(11) DEFAULT NULL COMMENT '原因id',  `owner` varchar(255) DEFAULT NULL COMMENT '第一次操作所属人',  `latest_owner` varchar(255) DEFAULT NULL COMMENT '最后一次操作所属人',  `status` int(11) DEFAULT NULL COMMENT '状态',  `created_at` int(11) DEFAULT NULL COMMENT '创建时间',  `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',  PRIMARY KEY (`id`),  UNIQUE KEY `anti_copy` (`key`,`type_id`,`project`),  KEY `check_blacklist` (`status`,`key`,`type_id`,`project`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1;"""],'task_desc':'添加召回黑名单表','check_index':0,'check_sql':'SHOW TABLES LIKE "recall_blacklist"','check_sql_result':'recall_blacklist','args':[],'eval':[]}
        self.all_packages['110203'] = {'version':110203,'previous_version':[110202],'updatetype':'once','dbtype':'all','sql':["""CREATE TABLE recall_blacklist_history` (  `rbid` int(11) NOT NULL COMMENT 'recall_blacklist的id',  `checker` varchar(255) DEFAULT NULL COMMENT '查询者的名字',  `result_status_id` int(11) DEFAULT NULL COMMENT '返回的status_code里pid是39的状态',  `result_reason_id` int(11) DEFAULT NULL COMMENT '返回的status_code里pid是30的理由',  `created_at` int(11) DEFAULT NULL COMMENT '创建时间',  KEY `rbid` (`rbid`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;"""],'task_desc':'添加召回黑名单历史表','check_sql':'SHOW TABLES LIKE "recall_blacklist_history"','check_index':0,'check_sql_result':'recall_blacklist_history','args':[],'eval':[]}
        self.all_packages['110204'] = {'version':110204,'previous_version':[110203],'updatetype':'once','dbtype':'all','sql':["""CREATE TABLE `recall_blacklist_reason` (  `rbid` int(11) NOT NULL COMMENT 'recall_blacklist的id',  `reason_id` int(11) DEFAULT NULL COMMENT 'status_code里pid是30的状态',  `reason_owner` varchar(255) DEFAULT NULL COMMENT '修改人',  `reason_comment` varchar(255) DEFAULT NULL COMMENT '修改的备注',  `final_status_id` int(11) DEFAULT NULL COMMENT '最后写入recall_blacklist的status_code里pid是39的状态',  `created_at` varchar(255) DEFAULT NULL COMMENT '创建的时间',  KEY `rbid` (`rbid`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;"""],'task_desc':'添加召回黑名单原因表','check_sql':'SHOW TABLES LIKE "recall_blacklist_reason"','check_index':0,'check_sql_result':'recall_blacklist_reason','args':[],'eval':[]}
        self.all_packages['110205'] = {'version':110205,'previous_version':[110204],'updatetype':'project','dbtype':'all','sql':"""ALTER TABLE `{project_name}_noti`         ADD COLUMN `key` varchar(255) NULL COMMENT '消息接受方式key' AFTER `type`;""",'task_desc':'推送表增加key字段','check_sql':'''SHOW COLUMNS FROM `{project_name}_noti` LIKE 'key';''','check_index':0,'check_sql_result':"key",'args':['project_name'],'eval':[]}
        self.all_packages['110206'] = {'version':110206,'previous_version':[110205],'updatetype':'project','dbtype':'all','sql':"""ALTER TABLE `{project_name}_noti`         ADD INDEX `key`(`key`) USING BTREE;""",'task_desc':'推送表增加key索引','check_sql':'''SHOW INDEX FROM `{project_name}_noti` where key_name like 'key';''','check_index':2,'check_sql_result':"key",'args':['project_name'],'eval':[]}
        self.all_packages['110207'] = {'version':110207,'previous_version':[110206],'updatetype':'project','dbtype':'all','sql':"""ALTER TABLE `{project_name}_noti` ADD COLUMN `level` int(4) NULL COMMENT '消息级别' AFTER `owner`;""",'task_desc':'推送表增加level字段','check_sql':'''SHOW COLUMNS FROM `{project_name}_noti` LIKE 'level';''','check_index':0,'check_sql_result':"level",'args':['project_name'],'eval':[]}
        self.all_packages['110301'] = {'version':110301,'previous_version':[110207],'updatetype':'project','dbtype':'all','sql':"""ALTER TABLE `{project_name}_properties` ADD COLUMN `access_control_threshold` int(10) NULL AFTER `total_count`;""",'task_desc':'项目属性表增加access_control_threshold字段','check_sql':'''SHOW COLUMNS FROM `{project_name}_properties` LIKE `access_control_threshold`''','check_index':0,'check_sql_result':"access_control_threshold",'args':['project_name'],'eval':[]}
        self.all_packages['110302'] = {'version':110302,'previous_version':[110301],'updatetype':'once','dbtype':'all','sql':["""ALTER TABLE `project_list` ADD COLUMN `access_control_threshold_sum` int(11) NULL COMMENT '接入控制的全局缺省值' AFTER `enable_scheduler`;"""],'task_desc':'项目列表表增加access_control_threshold_sum字段','check_sql':'SHOW COLUMNS FROM `project_list` LIKE `access_control_threshold_sum`','check_index':0,'check_sql_result':'access_control_threshold_sum','args':[],'eval':[]}
        self.all_packages['110303'] = {'version':110303,'previous_version':[110302],'updatetype':'once','dbtype':'all','sql':["""ALTER TABLE `project_list` ADD COLUMN `access_control_threshold_event` int(11) NULL COMMENT '接入控制的单项缺省值' AFTER `access_control_threshold_sum`;"""],'task_desc':'项目列表表增加access_control_threshold_event字段','check_sql':'SHOW COLUMNS FROM `project_list` LIKE `access_control_threshold_event`','check_index':0,'check_sql_result':'access_control_threshold_event','args':[],'eval':[]}
        self.all_packages['110304'] = {'version':110304,'previous_version':[110303],'updatetype':'once','dbtype':'all','sql':["""ALTER TABLE `project_list` ADD COLUMN `access_control_threshold_event` int(11) NULL COMMENT '接入控制的单项缺省值' AFTER `access_control_threshold_sum`;"""],'task_desc':'项目列表表增加access_control_threshold_event字段','check_sql':'SHOW COLUMNS FROM `project_list` LIKE `access_control_threshold_event`','check_index':0,'check_sql_result':'access_control_threshold_event','args':[],'eval':[]}
        self.all_packages['110305'] = {'version':110305,'previous_version':[110304],'updatetype':'once','dbtype':'all','sql':["""CREATE TABLE `access_control` (  `project` varchar(255) NOT NULL COMMENT '项目名',  `key` varchar(255) NOT NULL COMMENT 'status_code里pid=56',  `type` int(4) NOT NULL COMMENT 'key类型',  `event` varchar(255) NOT NULL COMMENT 'event类型',  `status` int(4) DEFAULT NULL COMMENT 'status_code里pid=59',  `date` date NOT NULL COMMENT '日期',  `hour` int(4) NOT NULL COMMENT '小时',  `pv` int(10) DEFAULT NULL COMMENT '事件量',  `updated_at` int(10) DEFAULT NULL COMMENT '更新时间',  PRIMARY KEY (`project`,`key`,`type`,`event`,`date`,`hour`) /*T![clustered_index] NONCLUSTERED */,  KEY `hour_key` (`date`,`hour`,`key`),  KEY `key` (`key`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;"""],'task_desc':'创建access_control表，注意这里的强制了非聚簇索引是为了方便用户调整','check_sql':'SHOW TABLES LIKE `access_control`','check_index':0,'check_sql_result':'access_control','args':[],'eval':[]}
        self.all_packages['110306'] = {'version':110306,'previous_version':[110305],'updatetype':'once','dbtype':'all','sql':["INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (54,'运营类禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (55,'接入控制状态',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (56,'取消黑名单',55);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (57,'临时黑名单',55);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (58,'永久黑名单',55);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (59,'接入控制类型',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (60,'ip',59);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (61,'ip_group',59);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (62,'distinct_id',59);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (63,'add_on_key',59);"],'task_desc':'添加状态码表信息','check_sql':'SELECT MAX(id) FROM events.status_code;','check_index':0,'check_sql_result':'63','args':[],'eval':[]}
        self.all_packages['110307'] = {'version':110307,'previous_version':[110306],'updatetype':'once','dbtype':'all','sql':["INSERT IGNORE INTO `status_code` VALUES (64, '配置文件状态', 0);","INSERT IGNORE INTO `status_code` VALUES (65, '配置生效', 64);","INSERT IGNORE INTO `status_code` VALUES (66, '升级下一个配置', 64);","INSERT IGNORE INTO `status_code` VALUES (67, '停留在此配置', 64);","INSERT IGNORE INTO `status_code` VALUES (68, '失效配置', 64);","INSERT IGNORE INTO `status_code` VALUES (69, '函数执行状态', 0);","INSERT IGNORE INTO `status_code` VALUES (70, '函数执行成功', 69);","INSERT IGNORE INTO `status_code` VALUES (71, '函数执行失败', 69);","INSERT IGNORE INTO `status_code` VALUES (72, '等待确认的配置', 64);","INSERT IGNORE INTO `status_code` VALUES (73, '灰度升级', 64);","INSERT IGNORE INTO `status_code` VALUES (74, 'referrer', 59);","INSERT IGNORE INTO `status_code` VALUES (75, '控制列表排除方向', 0);","INSERT IGNORE INTO `status_code` VALUES (76, '白名单', 75);","INSERT IGNORE INTO `status_code` VALUES (77, '黑名单', 75);","INSERT IGNORE INTO `status_code` VALUES (78, '永久取消黑名单', 55);","INSERT IGNORE INTO `status_code` VALUES (79, '请求频繁进入接入控制名单', 30);","INSERT IGNORE INTO `status_code` VALUES (80, 'ip_group_extend', 59);","INSERT IGNORE INTO `status_code` VALUES (81, 'umail', 22);","INSERT IGNORE INTO `status_code` VALUES (82, 'aliyun_sms', 22);","INSERT IGNORE INTO `status_code` VALUES (83, 'qcloud_sms', 22);"],'task_desc':'添加状态码表信息','check_sql':'SELECT MAX(id) FROM events.status_code;','check_index':0,'check_sql_result':'83','args':[],'eval':[]}
        self.all_packages['110401'] = {'version':110401,'previous_version':[110307],'updatetype':'once','dbtype':'all','sql':["""CREATE TABLE `shortcut_new` (`project` varchar(255) DEFAULT NULL COMMENT '项目名',`short_url` varchar(255) DEFAULT NULL COMMENT '短链地址',`short_url_dec` bigint(18) NOT NULL DEFAULT '0' COMMENT '短链地址十进制表达。正数是自身创建的。0是网站外带进来的需要参与排序的。-1是手动创建或修改不参与排序的。',`long_url` varchar(768) DEFAULT NULL COMMENT '长链地址',`expired_at` int(11) DEFAULT NULL COMMENT '过期时间',`created_at` int(11) DEFAULT NULL COMMENT '创建时间',`src` varchar(10) DEFAULT NULL COMMENT '使用的第三方创建源',`src_short_url` varchar(255) DEFAULT NULL COMMENT '创建源返回的短地址',`submitter` varchar(255) DEFAULT NULL COMMENT '由谁提交',`utm_source` varchar(2048) DEFAULT NULL COMMENT 'utm_source',`utm_medium` varchar(2048) DEFAULT NULL COMMENT 'utm_medium',`utm_campaign` varchar(2048) DEFAULT NULL COMMENT 'utm_campaign',`utm_content` varchar(2048) DEFAULT NULL COMMENT 'utm_content',`utm_term` varchar(2048) DEFAULT NULL COMMENT 'utm_term',KEY `long_url` (`long_url`),KEY `short_url_dec`(`short_url_dec`),UNIQUE KEY `short_url` (`short_url`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;"""],'task_desc':'创建新的shortcut表','check_sql':'SHOW TABLES LIKE "shortcut_new";','check_index':0,'check_sql_result':'shortcut_new','args':[],'eval':[]}
        self.all_packages['110402'] = {'version':110402,'previous_version':[110401],'updatetype':'once','dbtype':'tidb6.5+','sql':["""BATCH ON short_url LIMIT 50000 INSERT INTO shortcut_new SELECT `project`,`short_url`,0 AS `short_url_dec`,`long_url`,`expired_at`,`created_at`,`src`,`src_short_url`,`submitter`,`utm_source`,`utm_medium`,`utm_campaign`,`utm_content`,`utm_term` FROM shortcut GROUP BY `project`,`short_url`,`short_url_dec`,`long_url`,`expired_at`,`created_at`,`src`,`src_short_url`,`submitter`,`utm_source`,`utm_medium`,`utm_campaign`,`utm_content`,`utm_term`;"""],'task_desc':'批次迁移shortcut表数据，适用tidb6.5+环境','check_sql':'''select orgcount-newcount from (select 'c' as id,count(1) as orgcount from shortcut group by id)o join (select 'c' as id,count(1) as newcount from shortcut_new group by id)n on o.id=n.id;''','check_index':0,'check_sql_result':'0','args':[],'eval':[]}
        self.all_packages['110403'] = {'version':110403,'previous_version':[110401],'updatetype':'once','dbtype':'all','sql':["""INSERT INTO shortcut_new SELECT `project`,`short_url`,0 AS `short_url_dec`,`long_url`,`expired_at`,`created_at`,`src`,`src_short_url`,`submitter`,`utm_source`,`utm_medium`,`utm_campaign`,`utm_content`,`utm_term` FROM shortcut GROUP BY `project`,`short_url`,`short_url_dec`,`long_url`,`expired_at`,`created_at`,`src`,`src_short_url`,`submitter`,`utm_source`,`utm_medium`,`utm_campaign`,`utm_content`,`utm_term`;"""],'task_desc':'单次迁移shortcut表数据适用于低版本tidb或其他mysql类数据库','check_sql':'''select orgcount-newcount from (select 'c' as id,count(1) as orgcount from shortcut group by id)o join (select 'c' as id,count(1) as newcount from shortcut_new group by id)n on o.id=n.id;''','check_index':0,'check_sql_result':'0','args':[],'eval':[]}
        self.all_packages['110405'] = {'version':110405,'previous_version':[110402,110403],'updatetype':'once','dbtype':'all','sql':["""RENAME TABLE shortcut TO shortcut_backup;"""],'task_desc':'变更就旧表名','check_sql':'''SHOW TABLES LIKE "shortcut_backup";''','check_index':0,'check_sql_result':"shortcut_backup",'args':[],'eval':[]}
        self.all_packages['110406'] = {'version':110406,'previous_version':[110405],'updatetype':'once','dbtype':'all','sql':["""RENAME TABLE shortcut_new TO shortcut;"""],'task_desc':'启用新表','check_sql':'''SHOW TABLES LIKE "shortcut";''','check_index':0,'check_sql_result':"shortcut",'args':[],'eval':[]}
        self.all_packages['110407'] = {'version':110407,'previous_version':[110406],'updatetype':'once','dbtype':'all','sql':[],'task_desc':'short_url_dec字段补历史数据','check_sql':'''select count(1)-sum(if(short_url_dec>0,1,0)) from shortcut where src in ("import","importer","sensors");''','check_index':0,'check_sql_result':"0",'args':[],'eval':["""update_shortcut_table(import_list='''"import","importer","sensors"''')"""]}


    def fisrt_version_inspect(self):
        #如果运行时发现缺少版本信息，则检查数据库确定当前版本。
        pass

    def setup_ghost_sa(self,project_name='default',expired_at=2147483647):
        #初始化ghost_sa数据表
        init_once = [
            """CREATE TABLE IF NOT EXISTS `project_list` (    `project_name` varchar(255) DEFAULT NULL COMMENT '项目名称',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `expired_at` int(11) DEFAULT NULL COMMENT '过期时间',    `event_count` bigint(20) DEFAULT NULL COMMENT '事件量',    `device_count` bigint(20) DEFAULT NULL COMMENT '设备数',    `user_count` bigint(20) DEFAULT NULL COMMENT '用户数',    `enable_scheduler` int(4) DEFAULT 1 COMMENT '是否启动定时器支持',    `access_control_threshold_sum` int(11) DEFAULT NULL COMMENT '接入控制的全局缺省值',    `access_control_threshold_event` int(11) DEFAULT NULL COMMENT '接入控制的单项缺省值',  UNIQUE KEY `uniqueindex` (`project_name`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='项目列表';""",
            """CREATE TABLE IF NOT EXISTS `shortcut` (    `project` varchar(255) DEFAULT NULL COMMENT '项目名',    `short_url` varchar(255) DEFAULT NULL COMMENT '短链地址',    `short_url_dec` bigint(18) NOT NULL DEFAULT '0' COMMENT '短链地址十进制表达。正数是自身创建的。0是网站外带进来的需要参与排序的。-1是手动创建或修改不参与排序的。',    `long_url` varchar(768) DEFAULT NULL COMMENT '长链地址',    `expired_at` int(11) DEFAULT NULL COMMENT '过期时间',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `src` varchar(10) DEFAULT NULL COMMENT '使用的第三方创建源',    `src_short_url` varchar(255) DEFAULT NULL COMMENT '创建源返回的短地址',    `submitter` varchar(255) DEFAULT NULL COMMENT '由谁提交',    `utm_source` varchar(2048) DEFAULT NULL COMMENT 'utm_source',    `utm_medium` varchar(2048) DEFAULT NULL COMMENT 'utm_medium',    `utm_campaign` varchar(2048) DEFAULT NULL COMMENT 'utm_campaign',    `utm_content` varchar(2048) DEFAULT NULL COMMENT 'utm_content',    `utm_term` varchar(2048) DEFAULT NULL COMMENT 'utm_term',    KEY `long_url` (`long_url`),    KEY `short_url_dec`(`short_url_dec`),    UNIQUE KEY `short_url` (`short_url`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='短链列表';""",
            """CREATE TABLE IF NOT EXISTS `shortcut_history` (    `short_url` varchar(255) DEFAULT NULL COMMENT '解析短链',    `result` varchar(255) DEFAULT NULL COMMENT '解析的结果',    `cost_time` int(11) DEFAULT NULL COMMENT '耗费时间',    `ip` varchar(255) DEFAULT NULL,    `created_at` int(11) DEFAULT NULL COMMENT '解析时间',    `user_agent` text DEFAULT NULL,    `accept_language` text DEFAULT NULL,    `ua_platform` varchar(255) DEFAULT NULL,    `ua_browser` varchar(255) DEFAULT NULL,    `ua_version` varchar(255) DEFAULT NULL,    `ua_language` varchar(255) DEFAULT NULL,    KEY `created_at` (`created_at`),    KEY `short_url` (`short_url`),    KEY `short_url_result` (`short_url`,`result`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='短链解析记录';""",
            """CREATE TABLE if not EXISTS `mobile_ad_src` (    `src` varchar(255) NOT NULL COMMENT '创建源名称',    `src_name` varchar(255) DEFAULT NULL COMMENT '创建源的中文名字',    `src_args` varchar(1024) DEFAULT NULL COMMENT '创建源自带参数',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '维护时间',    `utm_source` varchar(255) DEFAULT NULL COMMENT '缺省的utm_source',    `utm_medium` varchar(255) DEFAULT NULL COMMENT '缺省的utm_medium',    `utm_campaign` varchar(255) DEFAULT NULL COMMENT '缺省的utm_campaign',    `utm_content` varchar(255) DEFAULT NULL COMMENT '缺省的utm_content',    `utm_term` varchar(255) DEFAULT NULL COMMENT '缺省的utm_term',    PRIMARY KEY (`src`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='ASO/DSP创建源缺省参数，这个表可在configs/mobile_ad_src_list.csv中自行添加，更新检查时会自动补充';""",
            """CREATE TABLE if not EXISTS `mobile_ad_list` (    `project` varchar(255) DEFAULT NULL COMMENT '项目名',    `url` varchar(768) NOT NULL COMMENT '监测地址',    `expired_at` int(11) DEFAULT NULL COMMENT '过期时间',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `src` varchar(255) DEFAULT NULL COMMENT '使用的检测原id',    `src_url` varchar(1024) DEFAULT NULL COMMENT '使用的检测模板',    `submitter` varchar(255) DEFAULT NULL COMMENT '由谁提交',    `utm_source` varchar(2048) DEFAULT NULL COMMENT 'utm_source',    `utm_medium` varchar(2048) DEFAULT NULL COMMENT 'utm_medium',    `utm_campaign` varchar(2048) DEFAULT NULL COMMENT 'utm_campaign',    `utm_content` varchar(2048) DEFAULT NULL COMMENT 'utm_content',    `utm_term` varchar(2048) DEFAULT NULL COMMENT 'utm_term',    PRIMARY KEY (`url`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='ASO/DSP接受地址列表';""",
            """CREATE TABLE if not EXISTS `shortcut_read` (    `short_url` varchar(255) NOT NULL COMMENT '短链地址',    `ip` varchar(20) DEFAULT NULL COMMENT 'ip',    `created_at` int(11) DEFAULT NULL COMMENT '时间',    `user_agent` text DEFAULT NULL COMMENT 'ua',    `accept_language` text DEFAULT NULL COMMENT '语言',    `ua_platform` varchar(255) DEFAULT NULL COMMENT '平台',    `ua_browser` varchar(255) DEFAULT NULL COMMENT '浏览器',    `ua_version` varchar(255) DEFAULT NULL COMMENT '版本号',    `ua_language` varchar(255) DEFAULT NULL COMMENT '语言',    `referrer` text DEFAULT NULL COMMENT '页面',    KEY `short_url` (`short_url`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin  COMMENT='短链二维码或隐藏跟踪图片加载历史';""",
            """CREATE TABLE IF NOT EXISTS `recall_blacklist` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `project` varchar(255) NOT NULL COMMENT '项目名',    `distinct_id` varchar(255) DEFAULT NULL,    `key` varchar(255) NOT NULL COMMENT '渠道key',    `type_id` int(11) NOT NULL COMMENT '渠道类型',    `reason_id` int(11) DEFAULT NULL COMMENT '原因id',    `owner` varchar(255) DEFAULT NULL COMMENT '第一次操作所属人',    `latest_owner` varchar(255) DEFAULT NULL COMMENT '最后一次操作所属人',    `status` int(11) DEFAULT NULL COMMENT '状态',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`),    UNIQUE KEY `anti_copy` (`key`,`type_id`,`project`),    KEY `check_blacklist` (`status`,`key`,`type_id`,`project`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='消息推送黑名单列表';""",
            """CREATE TABLE IF NOT EXISTS `recall_blacklist_history` (    `rbid` int(11) NOT NULL COMMENT 'recall_blacklist的id',    `checker` varchar(255) DEFAULT NULL COMMENT '查询者的名字',    `result_status_id` int(11) DEFAULT NULL COMMENT '返回的status_code里pid是39的状态',    `result_reason_id` int(11) DEFAULT NULL COMMENT '返回的status_code里pid是30的理由',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    KEY `rbid` (`rbid`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='消息推送黑名单拦截记录';""",
            """CREATE TABLE IF NOT EXISTS `recall_blacklist_reason` (    `rbid` int(11) NOT NULL COMMENT 'recall_blacklist的id',    `reason_id` int(11) DEFAULT NULL COMMENT 'status_code里pid是30的状态',    `reason_owner` varchar(255) DEFAULT NULL COMMENT '修改人',    `reason_comment` varchar(255) DEFAULT NULL COMMENT '修改的备注',    `final_status_id` int(11) DEFAULT NULL COMMENT '最后写入recall_blacklist的status_code里pid是39的状态',    `created_at` varchar(255) DEFAULT NULL COMMENT '创建的时间',    KEY `rbid` (`rbid`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='消息推送黑名单添加/移除理由';""",
            """CREATE TABLE IF NOT EXISTS `access_control` (    `project` varchar(255) NOT NULL COMMENT '项目名',    `key` varchar(255) NOT NULL COMMENT 'status_code里pid=56',    `type` int(4) NOT NULL COMMENT 'key类型',    `event` varchar(255) NOT NULL COMMENT 'event类型',    `status` int(4) DEFAULT NULL COMMENT 'status_code里pid=59',    `date` date NOT NULL COMMENT '日期',    `hour` int(4) NOT NULL COMMENT '小时',    `pv` int(10) DEFAULT NULL COMMENT '事件量',    `updated_at` int(10) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`project`,`key`,`type`,`event`,`date`,`hour`),    KEY `hour_key` (`date`,`hour`,`key`),    KEY `key` (`key`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='接入控制数据统计表';""",
            """CREATE TABLE IF NOT EXISTS `status_code` (    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',    `desc` varchar(255) DEFAULT NULL COMMENT '含义',    `p_id` int(11) DEFAULT NULL COMMENT '父id',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='状态码表，这个表只能由程序维护，请勿擅自添加';""",
            """CREATE TABLE IF NOT EXISTS `scheduler_jobs` (        `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '任务id',        `project` varchar(255) DEFAULT NULL COMMENT '项目id',        `group_id` int(11) DEFAULT NULL COMMENT 'group_plan的id',        `list_index` int(11) DEFAULT NULL COMMENT 'group_index任务完成后，补充',        `datetime` int(11) DEFAULT NULL COMMENT '执行的日期，即要执行的那个任务的时间（不是任务执行时间，是要执行的时间。如周三时执行周一的任务。也用来防止任务重复添加）',        `data` json DEFAULT NULL COMMENT '其他附带的参数',        `priority` int(4) DEFAULT NULL COMMENT '优先级',        `status` int(4) DEFAULT NULL COMMENT '状态',        `created_at` int(11) DEFAULT NULL COMMENT '创建时间',        `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',        PRIMARY KEY (`id`),        UNIQUE KEY `ind_task` (`project`,`group_id`,`datetime`)    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='定时任务表，每个项目用户分群PLAN的计划，会统一进入这里排队，确保同一时间只有1个任务再跑，哪怕OOM也只是打挂1个副本，保证业务的连续性';"""
        ]
        init_project = [
            """CREATE TABLE IF NOT EXISTS `{project_name}` (    `track_id` bigint(17) DEFAULT NULL COMMENT '排重识别ID，需要与distinct_id，all_json.$time，一起使用时较为安全',    `distinct_id` varchar(64) DEFAULT NULL COMMENT 'distinct_id，登陆后为login方法提供的id，登陆前各端不同，通常为UUID',    `lib` varchar(255) DEFAULT NULL COMMENT '上报的SDK类型',    `event` varchar(255) DEFAULT NULL COMMENT '上报的事件名称',    `type` varchar(255) DEFAULT NULL COMMENT '上报埋点的功能类型，track为普通埋点，其他类型会触发额外的服务端动作',    `all_json` json DEFAULT NULL COMMENT '埋点上报的全部内容',    `host` varchar(255) DEFAULT NULL COMMENT '埋点由哪个域名接收',    `user_agent` varchar(2048) DEFAULT NULL COMMENT '上报端的UA',    `ua_platform` varchar(1024) DEFAULT NULL COMMENT '从UA提取的上报端的平台',    `ua_browser` varchar(1024) DEFAULT NULL COMMENT '从UA提取的上报端的浏览器',    `ua_version` varchar(1024) DEFAULT NULL COMMENT '从UA提取的上报端的浏览器版本',    `ua_language` varchar(1024) DEFAULT NULL COMMENT '从UA提取的上报端的语言',    `connection` varchar(255) DEFAULT NULL COMMENT '上报端的接收的链接参数',    `pragma` varchar(255) DEFAULT NULL COMMENT '上报端的接受的pragma参数',    `cache_control` varchar(255) DEFAULT NULL COMMENT '上报端的接受的cache_control参数',    `accept` varchar(255) DEFAULT NULL COMMENT '上报端的接受的accept参数',    `accept_encoding` varchar(255) DEFAULT NULL COMMENT '上报端的接受的accept_encoding参数',    `accept_language` varchar(255) DEFAULT NULL COMMENT '上报端的接受的accept_language参数',    `ip` varchar(512) DEFAULT NULL COMMENT '上报端的IP，在包含WAF，SLB等中间件的情况下，会尽可能取到真实IP',    `ip_city` json DEFAULT NULL COMMENT '上报端的IP的城市信息，可以在admin.py中配置详细程度',    `ip_asn` json DEFAULT NULL COMMENT '上报端的IP的ASN信息',    `url` text DEFAULT NULL COMMENT '上报埋点请求的URL',    `referrer` varchar(2048) DEFAULT NULL COMMENT '上报请求时附带的referrer',    `remark` varchar(255) DEFAULT NULL COMMENT 'remark备注，通常用于调试时快速筛选开发者，在上报时添加remark字段即可。命中admin.py里配置的爬虫的标记，会被强制标记为spider。如果admin.py开启去重并标记，重复数据会以du-开头用于复盘。',    `created_at` int(11) DEFAULT NULL COMMENT '上报时间',    `date` date DEFAULT NULL COMMENT '上报日期，用来快速筛选日期',    `hour` int(2) DEFAULT NULL COMMENT '上报小时，用来快速筛选小时',    KEY `date` (`date`),    KEY `distinct_id` (`distinct_id`),    KEY `event` (`event`),    KEY `date_hour` (`date`,`hour`),    KEY `event_date` (`event`,`date`),    KEY `event_remark_date` (`event`,`remark`,`date`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='{project_name}项目埋点事件表，所有的埋点上报内容都会写入此表';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_device` (    `distinct_id` varchar(255) NOT NULL COMMENT 'distinct_id，登陆后为login方法提供的id，登陆前各端不同，通常为UUID',    `lib` varchar(200) DEFAULT NULL COMMENT '上报的SDK类型',    `device_id` varchar(255) DEFAULT NULL COMMENT '设备ID，通常为设备的IMEI，IDFA，UUID等，SDK拿不到的时候可能没有',    `manufacturer` varchar(200) DEFAULT NULL COMMENT '设备制造商',    `model` varchar(200) DEFAULT NULL COMMENT '设备型号',    `os` varchar(200) DEFAULT NULL COMMENT '操作系统',    `os_version` varchar(200) DEFAULT NULL COMMENT '操作系统版本',    `ua_platform` varchar(200) DEFAULT NULL COMMENT '从UA提取的上报端的平台',    `ua_browser` varchar(200) DEFAULT NULL COMMENT '从UA提取的上报端的浏览器',    `ua_version` varchar(200) DEFAULT NULL COMMENT '从UA提取的上报端的浏览器版本',    `ua_language` varchar(200) DEFAULT NULL COMMENT '从UA提取的上报端的语言',    `screen_width` int(11) DEFAULT NULL COMMENT 'SDK提取的屏幕宽度（通常来自最新设备，具体获取时机可在admin.py中配置）',    `screen_height` int(11) DEFAULT NULL COMMENT 'SDK提取的屏幕高度（通常来自最新设备，具体获取时机可在admin.py中配置）',    `network_type` varchar(32) DEFAULT NULL COMMENT 'SDK提取的网络类型（通常来自最新设备，具体获取时机可在admin.py中配置）',    `user_agent` varchar(768) DEFAULT NULL COMMENT '上报端的UA（通常来自最新设备，具体获取时机可在admin.py中配置）',    `accept_language` varchar(255) DEFAULT NULL COMMENT '上报端的接受的accept_language参数（通常来自最新设备，具体获取时机可在admin.py中配置）',    `ip` varchar(255) DEFAULT NULL COMMENT '上报端的IP，在包含WAF，SLB等中间件的情况下，会尽可能取到真实IP（通常来自最新设备，具体获取时机可在admin.py中配置）',    `ip_city` json DEFAULT NULL COMMENT '上报端的IP的城市信息（通常来自最新设备，具体获取时机可在admin.py中配置）',    `ip_asn` json DEFAULT NULL COMMENT '上报端的IP的ASN信息（通常来自最新设备，具体获取时机可在admin.py中配置）',    `wifi` varchar(20) DEFAULT NULL COMMENT 'SDK提取的是否wifi（通常来自最新设备，具体获取时机可在admin.py中配置）',    `app_version` varchar(255) DEFAULT NULL COMMENT 'SDK提取的app版本（通常来自最新设备，具体获取时机可在admin.py中配置）',    `carrier` varchar(255) DEFAULT NULL COMMENT 'SDK提取的运营商（通常来自最新设备，具体获取时机可在admin.py中配置）',    `referrer` text DEFAULT NULL COMMENT 'SDK提取的referrer（通常来自最新设备，具体获取时机可在admin.py中配置）',    `referrer_host` varchar(512) DEFAULT NULL COMMENT 'SDK提取的referrer_host（通常来自最新设备，具体获取时机可在admin.py中配置）',    `bot_name` varchar(255) DEFAULT NULL COMMENT 'SDK提取的bot_name（通常来自最新设备，具体获取时机可在admin.py中配置）',    `browser` varchar(128) DEFAULT NULL COMMENT 'SDK提取的browser（通常来自最新设备，具体获取时机可在admin.py中配置）',    `browser_version` varchar(128) DEFAULT NULL COMMENT 'SDK提取的browser_version（通常来自最新设备，具体获取时机可在admin.py中配置）',    `is_login_id` varchar(32) DEFAULT NULL COMMENT 'SDK提取的is_login_id（通常来自最新设备，具体获取时机可在admin.py中配置，但最好还是用distinct_id根据自身实际情况判断更准一些）',    `screen_orientation` varchar(64) DEFAULT NULL COMMENT 'SDK提取的screen_orientation（通常来自最新设备，具体获取时机可在admin.py中配置）',    `gps_latitude` decimal(11,7) DEFAULT NULL COMMENT 'SDK提取的gps_latitude，之来自定位服务的IP，如果没有授权，可以使用ip_city里通过IP解析的latitude（通常来自最新设备，具体获取时机可在admin.py中配置）',    `gps_longitude` decimal(11,7) DEFAULT NULL COMMENT 'SDK提取的gps_longitude，之来自定位服务的IP，如果没有授权，可以使用ip_city里通过IP解析的longitude（通常来自最新设备，具体获取时机可在admin.py中配置）',    `first_visit_time` datetime DEFAULT NULL COMMENT 'SDK提取的first_visit_time（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `first_referrer` text DEFAULT NULL COMMENT 'SDK提取的first_referrer（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `first_referrer_host` varchar(512) DEFAULT NULL COMMENT 'SDK提取的first_referrer_host（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `first_browser_language` varchar(128) DEFAULT NULL COMMENT 'SDK提取的first_browser_language（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `first_browser_charset` varchar(128) DEFAULT NULL COMMENT 'SDK提取的first_browser_charset（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `first_search_keyword` varchar(768) DEFAULT NULL COMMENT 'SDK提取的first_search_keyword（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `first_traffic_source_type` varchar(255) DEFAULT NULL COMMENT 'SDK提取的first_traffic_source_type（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `utm_content` varchar(768) DEFAULT NULL COMMENT 'SDK提取的utm_content（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `utm_campaign` varchar(768) DEFAULT NULL COMMENT 'SDK提取的utm_campaign（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `utm_medium` varchar(768) DEFAULT NULL COMMENT 'SDK提取的utm_medium（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `utm_term` varchar(768) DEFAULT NULL COMMENT 'SDK提取的utm_term（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `utm_source` varchar(768) DEFAULT NULL COMMENT 'SDK提取的utm_source（通常来自最旧的设备，具体获取时机可在admin.py中配置）',    `latest_utm_content` varchar(768) DEFAULT NULL COMMENT 'SDK提取的latest_utm_content（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_utm_campaign` varchar(768) DEFAULT NULL COMMENT 'SDK提取的latest_utm_campaign（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_utm_medium` varchar(768) DEFAULT NULL COMMENT 'SDK提取的latest_utm_medium（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_utm_term` varchar(768) DEFAULT NULL COMMENT 'SDK提取的latest_utm_term（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_utm_source` varchar(768) DEFAULT NULL COMMENT 'SDK提取的latest_utm_source（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_referrer` text DEFAULT NULL COMMENT 'SDK提取的latest_referrer（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_referrer_host` varchar(512) DEFAULT NULL COMMENT 'SDK提取的latest_referrer_host（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_search_keyword` varchar(768) DEFAULT NULL COMMENT 'SDK提取的latest_search_keyword（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `latest_traffic_source_type` varchar(255) DEFAULT NULL COMMENT 'SDK提取的latest_traffic_source_type（通常来自最新的设备，具体获取时机可在admin.py中配置）',    `created_at` int(11) DEFAULT NULL COMMENT '该distinct_id最早出现的时间',    `updated_at` int(11) DEFAULT NULL COMMENT '该distinct_id最后出现的时间',    PRIMARY KEY (`distinct_id`),    KEY `utm_campaign` (`utm_campaign`),    KEY `utm_source` (`utm_source`),    KEY `utm_medium` (`utm_medium`),    KEY `utm_term` (`utm_term`),    KEY `utm_content` (`utm_content`),    KEY `created_at` (`created_at`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='{project_name}项目设备表，用来快速查询设备的第一次落地情况和最后活跃时间';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_user` (    `distinct_id` varchar(200) NOT NULL COMMENT '通常为login方法提供的登陆后ID，除非业务模式不需要登陆，但会set_profile时，才会有未登录ID',    `lib` varchar(127) NOT NULL COMMENT 'SDK类型',    `map_id` varchar(200) NOT NULL COMMENT '早期神策SDK版本进行用户绑定时的字段，新版本SDK不再使用了',    `original_id` varchar(200) NOT NULL COMMENT 'distinct_id绑定的未定登录ID，通常为UUID',    `user_id` varchar(255) DEFAULT NULL COMMENT '用户ID，通常设定用户信息时，提交的用户id，可以与distinct_id相同，也可以不同',    `all_user_profile` json DEFAULT NULL COMMENT '用户信息，通常为set_profile时提交的用户信息',    `created_at` int(11) DEFAULT NULL COMMENT '绑定或用户信息最早的创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '绑定或用户信息最后的更新时间，可以为用户在该设备最后一次执行登录认证的时间',    PRIMARY KEY (`distinct_id`,`lib`,`map_id`,`original_id`),    KEY `distinct_id` (`distinct_id`),    KEY `map_id` (`map_id`),    KEY `original_id` (`original_id`),    KEY `distinct_id_lib` (`distinct_id`,`lib`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='{project_name}项目用户表，用来查询用户信息和登陆前后的关联关系，使用方法参考wiki';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_properties` (    `lib` varchar(255) NOT NULL COMMENT 'SDK类型',    `remark` varchar(255) NOT NULL COMMENT 'remark备注，通常用于调试时快速筛选开发者，在上报时添加remark字段即可，用来区分不同remark的内容',    `event` varchar(255) NOT NULL COMMENT '事件名称，对应埋点上报的事件名称，其中cdn_mode，cdn_mode2不会由SDK上报，需要设定接入控制预制时需要手动添加',    `properties` json DEFAULT NULL COMMENT '事件属性，目前只在admin.py中开启后，才会更新event的key内容，后续会升级为event数据字典，现阶段不建议开启',    `properties_len` int(10) DEFAULT NULL COMMENT '如果开启，表示事件包含的字段数量',    `created_at` int(10) DEFAULT NULL COMMENT '如果开启，表示事件首次上报时间',    `updated_at` int(10) DEFAULT NULL COMMENT '如果开启，表示properties字段最后一次变更的时间（标志着埋点有变化）',    `lastinsert_at` int(10) DEFAULT NULL COMMENT '如果开启，表示事件最后一次上报时间',    `total_count` bigint(20) DEFAULT NULL COMMENT '如果开启，表示事件总量',    `access_control_threshold` int(10) DEFAULT NULL COMMENT '无论是否开启均有效，接入控制会读取此值作为当前事件是否触发限制的阈值。',    PRIMARY KEY (`lib`,`remark`,`event`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='{project_name}项目事件属性表，admin.py里开启后，可以统计事件数量以及标记事件字段信息，后续会在提供API的时候升级为event表数据字典，现阶段不建议开启，严重影响性能。无论是否admin.py里开启，设定接入控制阈值的功能都有效，接入控制会优先从此表查询阈值，找不到会project_list表找，再找不到，会从admin.py取default值。接入控制不是指控制埋点录入，而是其他业务查询用户是否存在超量行为，进行限制的风控功能。';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_usergroup_data` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `group_list_id` int(11) DEFAULT NULL COMMENT '分群列表id',    `data_index` int(11) DEFAULT NULL COMMENT '最新一组数据的index_id',    `data_key` varchar(255) DEFAULT NULL COMMENT '数据的唯一识别id',    `data_json` json DEFAULT NULL COMMENT '数据包',    `enable` int(11) DEFAULT NULL COMMENT '生效策略。参考status_code，p_id=7',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`),    KEY `group_list_id` (`group_list_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='{project_name}项目用户分群详情表';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_usergroup_list` (    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分群列表id',    `group_id` int(11) DEFAULT NULL COMMENT '分群id',    `group_list_index` int(11) DEFAULT NULL COMMENT '分群列表顺位',    `list_init_date` int(11) DEFAULT NULL COMMENT '触发时间',    `list_desc` varchar(255) DEFAULT NULL COMMENT '清单所描述的',    `jobs_id` int(4) DEFAULT NULL COMMENT 'scheduler_jbos的id',    `item_count` int(11) DEFAULT NULL COMMENT '分组条目数',    `status` int(4) DEFAULT NULL COMMENT '分群状态。参考status_code,p_id=1',    `complete_at` int(11) DEFAULT NULL COMMENT '分群完成时间',    `apply_temple_times` int(2) DEFAULT 0 COMMENT '被套用模板的次数',    `created_at` int(11) DEFAULT NULL COMMENT '条目创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '条目更新时间',    PRIMARY KEY (`id`),    UNIQUE KEY `unique_key` (`group_id`,`group_list_index`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='{project_name}项目用户分群列表';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_usergroup_plan` (    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分群id',    `group_title` varchar(255) DEFAULT NULL COMMENT '分群标题',    `group_desc` varchar(255) DEFAULT NULL COMMENT '分群描述',    `func` json DEFAULT NULL COMMENT '分群执行方法参考/scheduler_jobs/scheduler_job_creator.py',    `latest_data_list_index` int(11) DEFAULT NULL COMMENT '最新一组数据的id',    `repeatable` varchar(20) DEFAULT NULL COMMENT '定时器，分，时，日，月，周。不填的用*代替。跟crontab一个逻辑，不支持1-10的方式表达，多日的需要1,2,3,4,5,6,7,8这样的形式填',    `priority` int(4) DEFAULT NULL COMMENT '任务执行优先级',    `latest_data_time` int(11) DEFAULT NULL COMMENT '最新一组数据的完成时间',    `repeat_times` int(11) DEFAULT 0 COMMENT '分群完成次数',    `enable_policy` int(11) DEFAULT NULL COMMENT '生效策略。参考status_code，p_id=7',    `latest_apply_temple_id` int(11) DEFAULT NULL COMMENT '最后一次执行的模板类型',    `latest_apply_temple_time` int(11) DEFAULT NULL COMMENT '最后一次执行的模型时间',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='{project_name}项目用户分群计划表';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_noti` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `plan_id` int(11) DEFAULT NULL COMMENT '计划id',    `list_id` int(11) DEFAULT NULL COMMENT '列表id',    `data_id` int(11) DEFAULT NULL COMMENT '数据id',    `temple_id` int(4) DEFAULT NULL COMMENT '模板id',    `noti_group_id` int(11) DEFAULT NULL COMMENT '消息群组id',    `distinct_id` varchar(512) DEFAULT NULL COMMENT '用户识别id',    `priority` int(4) DEFAULT NULL COMMENT '优先级',    `status` int(4) DEFAULT NULL COMMENT '状态',    `owner` varchar(255) DEFAULT NULL COMMENT '添加人',    `level` int(4) DEFAULT NULL COMMENT '消息级别',    `type` int(4) DEFAULT NULL COMMENT '消息类型',    `key` varchar(255) DEFAULT NULL COMMENT '消息接受方式key',    `content` json DEFAULT NULL COMMENT '消息内容',    `send_at` int(11) DEFAULT NULL COMMENT '计划发送时间',    `recall_result` text DEFAULT NULL COMMENT '发送结果',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`),    KEY `distinct_id` (`distinct_id`),    KEY `send_plan` (`status`,`priority`,`send_at`),    KEY `key` (`key`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='{project_name}项目消息通知详情';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_noti_group` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `plan_id` int(11) DEFAULT NULL COMMENT '分群计划id',    `list_id` int(11) DEFAULT NULL COMMENT '分群列表id',    `data_id` int(11) DEFAULT NULL COMMENT '分群数据id',    `temple_id` int(11) DEFAULT NULL COMMENT '应用模板id',    `priority` int(4) DEFAULT NULL COMMENT '优先级id',    `status` int(4) DEFAULT NULL COMMENT '状态id',    `owner` varchar(255) DEFAULT NULL COMMENT '添加人',    `send_at` int(11) DEFAULT NULL COMMENT '计划发送时间',    `sent` int(11) DEFAULT NULL COMMENT '已发送数目',    `total` int(11) DEFAULT NULL COMMENT '该计划总数目',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='{project_name}项目消息通知分群';""",
            """CREATE TABLE IF NOT EXISTS `{project_name}_noti_temple` (    `id` int(11) NOT NULL AUTO_INCREMENT,    `name` varchar(255) DEFAULT NULL COMMENT '模板名称',    `temple_desc` varchar(255) DEFAULT NULL COMMENT '模板描述',    `args` json DEFAULT NULL COMMENT '模板参数',    `content` json DEFAULT NULL COMMENT '模板内容',    `apply_times` int(11) DEFAULT 0 COMMENT '应用次数',    `lastest_apply_time` int(11) DEFAULT NULL COMMENT '最后一次应用时间',    `lastest_apply_list` int(11) DEFAULT NULL COMMENT '最后一次应用列表',    `created_at` int(11) DEFAULT NULL COMMENT '创建时间',    `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',    PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin AUTO_INCREMENT=1 COMMENT='{project_name}项目消息通知模板';"""
        ]
        status_code = ["INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (1, '分群列表状态', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (2, '创建列表开始', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (3, '分群信息写入中', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (4, '分群写入完成并包含错误', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (5, '分群写入完成', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (6, '分群写入失败', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (7, '生效策略', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (8, '自动', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (9, '手动', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (10, '禁用', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (11, '进入分群队列', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (12, '优先级', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (13, '普通', 12);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (14, '高', 12);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (15, '最高', 12);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (16, '已添加任务队列', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (17, '任务已被选取', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (18, '任务方法加载完', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (19, '任务执行成功', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (20, '分群ETL失败', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (21, '任务执行失败', 1);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (22, '通知方式', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (23, 'email', 22);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (24, '自动分群但不自动应用模板', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (25, '推送状态', 0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (26, '推送成功', 25);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (27, '推送失败', 25);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (28, '自动分群自动应用模板但不自动发送', 7);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (29,'微信公众号',22);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (30,'黑名单修改原因',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (31,'用户自助退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (32,'用户自助取消退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (33,'客服投诉退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (34,'客服取消退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (35,'接收地址错误',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (36,'接收地址判定为垃圾邮件',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (37,'导入第三方黑名单',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (38,'第三方白名单覆盖',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (39,'黑名单状态',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (40,'全部禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (41,'推广类禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (42,'通知类禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (43,'拟加入黑名单待确认（如等待运营确认）',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (44,'已解禁',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (45,'不允许解禁',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (46,'误判人工解除',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (47,'客服主观退订',30);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (48,'消息级别',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (49,'紧急广播（忽略一切退订限制）',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (50,'IM',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (51,'通知',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (52,'运营',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (53,'推广',48);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (54,'运营类禁用',39);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (55,'接入控制状态',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (56,'取消黑名单',55);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (57,'临时黑名单',55);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (58,'永久黑名单',55);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (59,'接入控制类型',0);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (60,'ip',59);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (61,'ip_group',59);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (62,'distinct_id',59);","INSERT IGNORE INTO `status_code`(`id`, `desc`, `p_id`) VALUES (63,'add_on_key',59);","INSERT IGNORE INTO `status_code` VALUES (64, '配置文件状态', 0);","INSERT IGNORE INTO `status_code` VALUES (65, '配置生效', 64);","INSERT IGNORE INTO `status_code` VALUES (66, '升级下一个配置', 64);","INSERT IGNORE INTO `status_code` VALUES (67, '停留在此配置', 64);","INSERT IGNORE INTO `status_code` VALUES (68, '失效配置', 64);","INSERT IGNORE INTO `status_code` VALUES (69, '函数执行状态', 0);","INSERT IGNORE INTO `status_code` VALUES (70, '函数执行成功', 69);","INSERT IGNORE INTO `status_code` VALUES (71, '函数执行失败', 69);","INSERT IGNORE INTO `status_code` VALUES (72, '等待确认的配置', 64);","INSERT IGNORE INTO `status_code` VALUES (73, '灰度升级', 64);","INSERT IGNORE INTO `status_code` VALUES (74, 'referrer', 59);","INSERT IGNORE INTO `status_code` VALUES (75, '控制列表排除方向', 0);","INSERT IGNORE INTO `status_code` VALUES (76, '白名单', 75);","INSERT IGNORE INTO `status_code` VALUES (77, '黑名单', 75);","INSERT IGNORE INTO `status_code` VALUES (78, '永久取消黑名单', 55);","INSERT IGNORE INTO `status_code` VALUES (79, '请求频繁进入接入控制名单', 30);","INSERT IGNORE INTO `status_code` VALUES (80, 'ip_group_extend', 59);","INSERT IGNORE INTO `status_code` VALUES (81, 'umail', 22);","INSERT IGNORE INTO `status_code` VALUES (82, 'aliyun_sms', 22);","INSERT IGNORE INTO `status_code` VALUES (83, 'qcloud_sms', 22);"]

        for sql_once_index in range(len(init_once)):
            result = do_tidb_exe(sql=init_once[sql_once_index],retrycount=0)
            write_to_log(filename='db_init',defname='setup_ghost_sa',result='init_once'+str(sql_once_index)+':'+str(result),level='info')
        for sql_status_code_index in range(len(status_code)):
            result = do_tidb_exe(sql=status_code[sql_status_code_index],retrycount=0)
            write_to_log(filename='db_init',defname='setup_ghost_sa',result='status_code'+str(sql_status_code_index)+':'+str(result),level='info')

        if not isinstance(expired_at, int):
            expired_at = get_time_array_from_nlp(expired_at)['time_int']
        timenow = current_timestamp10()
        insert_project_list = """insert project_list (`project_name`,`created_at`,`expired_at`) values ('{project_name}',{created_at},{expired_at})""".format(project_name=project_name,created_at=timenow,expired_at=expired_at)
        res = do_tidb_exe(insert_project_list,retrycount=0,skip_mysql_code=1062)
        if res[1] == 1:
            write_to_log(filename='db_init',defname='setup_ghost_sa',result=project_name+'项目已插入project列表',level='info')
            for sql_project_index in range(len(init_project)):
                result = do_tidb_exe(sql=init_project[sql_project_index].format(project_name=project_name),retrycount=0)
                write_to_log(filename='db_init',defname='setup_ghost_sa',result='init_project'+project_name+str(sql_project_index)+':'+str(result),level='info')
        elif res[0] == 'sql_err':
            write_to_log(filename='db_init',defname='setup_ghost_sa',result=project_name+'项目已存在',level='info')

if __name__ == '__main__':
    db_init = DbInit()
    db_init.first_version_inspect()
    # db_init.traffic_update(max_retry_count=3)
    # print(db_init.check_version())
    # db_init.setup_ghost_sa(project_name='test_me')
    # print(db_init.check_version())